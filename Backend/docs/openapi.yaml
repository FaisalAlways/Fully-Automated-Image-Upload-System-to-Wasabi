openapi: 3.0.3
info:
  title: REST API DESIGN
  version: 1.0.0
  description: RESTful authentication services providing secure user signup, login, email verification, and password recovery workflows.

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server

# security:
#   - bearerAuth: []

# components:
#   securitySchemes:
#     bearerAuth:
#       type: http
#       scheme: bearer
#       bearerFormat: JWT

paths:
  /auth/signup:
    post:
      tags:
        - Registration
      summary: User registration
      description: Creates a new user account, stores encrypted password, and sends an email verification link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - phone
                - password
              properties:
                firstName:
                  type: string
                  example: Eftakhar Alam
                lastName:
                  type: string
                  example: Noor
                email:
                  type: string
                  format: email
                  example: eftakharalamnoor@gmail.com
                phone:
                  type: string
                  example: "+880 1903-253618"
                password:
                  type: string
                  format: password
                  example: NOor125@$435efe
      responses:
        "201":
          description: User registered successfully.
          content:
            application/json:
              example:
                message: Account created successfully. Please check your email to verify your account.
        "400":
          description: Bad request - missing required fields or invalid data.
          content:
            application/json:
              example:
                error: All fields are required.
        "409":
          description: Conflict - Email already exists.
          content:
            application/json:
              example:
                error: An account already exists. Please try logging in.
        "500":
          description: Internal server error.
          content:
            application/json:
              example:
                error: Something went wrong. Please try again later.

  /auth/verify-email:
    post:
      tags:
        - Email Verify
      summary: Verify user email using token
      description: Verifies a user's email address by validating the token sent to their email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "a1b2c3d4e5f6g7h8i9j0"
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              example:
                message: Email verified successfully
        "400":
          description: Invalid or missing token, or email already verified
          content:
            application/json:
              examples:
                missingToken:
                  summary: Token missing in request
                  value:
                    message: Token missing
                invalidToken:
                  summary: Token invalid or expired
                  value:
                    message: Invalid or expired token
                alreadyVerified:
                  summary: Email already verified
                  value:
                    message: Email already verified
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                message: Internal server error

  /auth/login:
    post:
      tags:
        - User Login
      summary: Login with Email and Password
      description: |
        Attempts to log in the user. Includes rate limiting and account disable logic.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: MyPassword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              example:
                status: success
                message: Logged in successfully.
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Missing required fields
          content:
            application/json:
              example:
                status: fail
                message: Email and Password required
        '401':
          description: Wrong email or password
          content:
            application/json:
              example:
                status: fail
                message: Invalid email or password.
        '403':
          description: Email not verified
          content:
            application/json:
              example:
                status: fail
                message: Email not verified. Please verify your email.
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                status: error
                message: Something went wrong. Please try again later.

  /auth/refresh-token:
    get:
      tags:
        - Refresh Token
      summary: Generate a new access token using a valid refresh token
      description: |
        This endpoint verifies the refresh token cookie. If valid, it issues a new access token.
        The refresh token is sent in an HTTP-only cookie named `refreshToken`.
      responses:
        200:
          description: Access token renewed successfully
          content:
            application/json:
              example:
                message: Access token renewed successfully
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Unauthorized - No refresh token provided or invalid/expired token
          content:
            application/json:
              examples:
                noToken:
                  summary: No refresh token provided
                  value:
                    message: Unauthorized: No refresh token provided
                userNotFound:
                  summary: User not found for the token
                  value:
                    message: Unauthorized: User not found
                invalidToken:
                  summary: Refresh token expired or invalid
                  value:
                    message: Unauthorized: Refresh token expired or invalid

  /auth/reset-password-otp:
    post:
      tags:
        - Password Reset
      summary: Request a password reset OTP sent to email
      description: |
        Sends a secure 6-digit OTP to the user's email if the email exists and no valid OTP is already active.
        Blocks repeated OTP requests for 3 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Reset code sent successfully
          content:
            application/json:
              example:
                message: Reset code sent to email
        '400':
          description: Missing email in request
          content:
            application/json:
              example:
                status: Fail
                message: Email is required.
        '404':
          description: User not found with provided email
          content:
            application/json:
              example:
                status: Fail
                message: User not found
        '429':
          description: OTP request too frequent, wait before requesting again
          content:
            application/json:
              example:
                status: Fail
                message: Please wait 120 seconds before requesting a new OTP.
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: Internal server error

  /auth/verified-email-otp:
    post:
      tags:
      - Verify email otp
      summary: Verify password reset OTP
      description: |
        Validates a user's password reset OTP sent to their email.
        If valid, returns a one-time token for resetting the password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                otp:
                  type: integer
                  example: 123456
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              example:
                status: success
                message: OTP verified successfully. Use this token to reset your password.
                resetToken: "1b4e28ba-2fa1-11d2-883f-0016d3cca427"
        "400":
          description: Invalid request or OTP
          content:
            application/json:
              examples:
                missingFields:
                  summary: Email or OTP missing
                  value:
                    status: fail
                    message: Email and OTP are required
                invalidOtp:
                  summary: OTP invalid or expired
                  value:
                    status: fail
                    message: Invalid or expired OTP
        "404":
          description: User not found
          content:
            application/json:
              example:
                status: fail
                message: User not found
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                status: error
                message: Internal server error
  
  /auth/set-new-password:
    post:
      tags:
      - Set a new password using reset token
      summary: User Set His new password
      description: |
       Allows a user to set a new password if they have a valid password reset token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - password
                - confirmPassword
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                token:
                  type: integer
                  example: 1b4e28ba-2fa1-11d2-883f-0016d3cca427
                password:
                  type: string
                  format: password
                  example: NewStrongPass123!#%$
                confirmPassword:
                  type: string
                  format: password
                  example: NewStrongPass123!#%$
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              example:
                status: success
                message: Password reset successfully.
        "400":
          description: Invalid input or token
          content:
            application/json:
              examples:
                missingFields:
                  summary: Missing required fields
                  value:
                    status: fail
                    message: Email, token, password, and confirmPassword are required
                invalidOtp:
                  summary: OTP invalid or expired
                  value:
                    status: fail
                    message: Invalid or expired OTP
        "404":
          description: User not found
          content:
            application/json:
              example:
                status: fail
                message: User not found
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                status: error
                message: Internal server error
