generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  OTHER
}

enum OtpType {
  PASSWORD_RESET
  OTHER
}

// ==========================
//         User Model
// ==========================
model User {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  email           String   @unique
  password        String
  isEmailVerified Boolean  @default(false)
  role            String   @default("guest")
  token           Token[]
  otp             Otp[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ==========================
//         Token Model
// ==========================
model Token {
  id        String    @id @default(uuid())
  token     String?   @unique
  tokenType TokenType
  expiresAt DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ==========================
//          OTP Model
// ==========================
model Otp {
  id        String   @id @default(uuid())
  otp       Int?     @unique
  otpType   OtpType
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===============================
//          Department Model
// ===============================
model Department {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  course    Course[]
  tressId  String @default(uuid()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===============================
//          Department Model
// ===============================
model Course {
  id             String          @id @default(uuid())
  title          String
  departmentId   String
  department     Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  courseOverview CourseOverview?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// ============================
//   Course Overview Model
// ============================
model CourseOverview {
  id                    String                  @id @default(uuid())
  description           String
  courseId              String                  @unique
  course                Course                  @relation(fields: [courseId], references: [id])
  WhoWillTakeThisCourse WhoWillTakeThisCourse[]
  CourseOutcome         CourseOutcome[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

// ======================================
//   Who Will Take This Course Model
// ======================================
model WhoWillTakeThisCourse {
  id               String         @id @default(uuid())
  title            String
  CourseOverviewId String         @unique
  CourseOverview   CourseOverview @relation(fields: [CourseOverviewId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// ====================================
//   Course Outcome Model
// ====================================
model CourseOutcome {
  id               String         @id @default(uuid())
  title            String
  CourseOverviewId String         @unique
  CourseOverview   CourseOverview @relation(fields: [CourseOverviewId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
